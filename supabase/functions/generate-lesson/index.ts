// supabase/functions/generate-lesson/index.ts

import "jsr:@supabase/functions-js/edge-runtime.d.ts"
import { createClient } from "jsr:@supabase/supabase-js@2"
import { OpenAI } from "npm:openai@4.8.0" 

const supabaseUrl = Deno.env.get("SUPABASE_URL")!;
const supabaseKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
const openaiApiKey = Deno.env.get("OPENAI_API_KEY")!;

const supabase = createClient(supabaseUrl, supabaseKey);
const openai = new OpenAI({ apiKey: openaiApiKey });

Deno.serve(async (req) => {
  try {
    const { lesson_id } = await req.json();
    console.log("Received generation request for lesson:", lesson_id);

    // 1. Fetch lesson outline
    const { data: lesson, error: fetchError } = await supabase
      .from("lessons")
      .select("*")
      .eq("id", lesson_id)
      .single();

    if (fetchError || !lesson) {
      console.error("Lesson fetch error:", fetchError);
      return new Response("Lesson not found", { status: 404 });
    }

    const outline = lesson.outline;
    console.log("Generating lesson for outline:", outline);

    // 2. Call the LLM to generate TypeScript code
    const prompt = `
      You are a code generator that produces **TypeScript lessons**. 

        Rules:
        1. Only output a valid TypeScript file. Do not include Markdown, text, or JSON outside TS syntax.
        2. The root artifact must be a variable named 'lesson' that implements the 'GeneratedLessonContent' interface.
        3. Include type-safe structures:
            - lesson.title: string
            - lesson.blocks: array of GeneratedLessonBlock
        4. LessonBlock can be of kind:
            - "explanation": { heading?: string, body: string, svgDiagram?: string }
            - "quiz": { description?: string, questions: [{ question: string, options: string[], answer: number, explanation?: string }] }
            - "code": { language: "ts" | "js" | "python", code: string, output?: string }
            - "image": { alt: string, url: string }

        5. Follow these strict rules:
            - Do not include any Markdown or fenced code blocks.
            - Output must compile as TypeScript.
            - Each block should have meaningful content relevant to the lesson outline.

        6. Your task: given a **lesson outline**, generate the 'lesson' variable as a TypeScript file.

        Lesson outline: "${outline}"
    `;

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "user",
          content: prompt,
        },
      ],
      max_tokens: 4000,
      temperature: 0.7,
    });

    let ts_code = response.choices[0]?.message?.content;
    
    if (!ts_code) {
      throw new Error("No content generated by OpenAI");
    }
    console.log("Generated TS code:", ts_code);

    // 3. Simple TypeScript to JavaScript conversion (basic)
    // For now, we'll store the TypeScript code and create a simple JS version
    
    // 4. Basic validation

    // 5. Update Supabase with final code
    await supabase
      .from("lessons")
      .update({
        status: "generated",
        ts_code,
      })
      .eq("id", lesson_id);

    console.log(`Lesson ${lesson_id} successfully generated.`);
    return new Response("Lesson generated successfully", { status: 200 });
  } catch (err) {
    console.error("Lesson generation failed:", err);

    // Update the DB with error if possible
    
    return new Response(`Error: ${err}`, { status: 500 });
  }
});
